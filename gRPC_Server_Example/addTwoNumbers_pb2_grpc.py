# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import addTwoNumbers_pb2 as addTwoNumbers__pb2


class AddTwoNumberServiceStub(object):
    """The AddTwoNumber service definition.
    service could be treated as a class that contains only functions in most OOPs
    我们看到这里的AddTwoNumberService是以”service”关键字开头，这里可以认为是
    众多面向对象编程语言里面的接口类（interface或者protocal）的定义，因为其中的
    方法定义都不会有具体的方法实现，方法实现是要在服务器后端代码中实现的
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTwo = channel.unary_unary(
                '/addTwoNumbers.AddTwoNumberService/AddTwo',
                request_serializer=addTwoNumbers__pb2.AddTwoNumberRequest.SerializeToString,
                response_deserializer=addTwoNumbers__pb2.AddTwoNumberReply.FromString,
                )


class AddTwoNumberServiceServicer(object):
    """The AddTwoNumber service definition.
    service could be treated as a class that contains only functions in most OOPs
    我们看到这里的AddTwoNumberService是以”service”关键字开头，这里可以认为是
    众多面向对象编程语言里面的接口类（interface或者protocal）的定义，因为其中的
    方法定义都不会有具体的方法实现，方法实现是要在服务器后端代码中实现的
    """

    def AddTwo(self, request, context):
        """line starts with 'rpc' keyword would define the actual service that can be called from client
        these could be seen as functions without actual implementation (cause the implementation would be in the server side codes, here in our example, Python codes)
        defined as interfaces... or protocals...
        这里的由rpc关键字开头的行即是接口类中的方法
        方法名称为AddTwo
        接受一个AddTwoNumberRequest输入类，返回类为AddTwoNumberReply
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AddTwoNumberServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTwo': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTwo,
                    request_deserializer=addTwoNumbers__pb2.AddTwoNumberRequest.FromString,
                    response_serializer=addTwoNumbers__pb2.AddTwoNumberReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'addTwoNumbers.AddTwoNumberService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AddTwoNumberService(object):
    """The AddTwoNumber service definition.
    service could be treated as a class that contains only functions in most OOPs
    我们看到这里的AddTwoNumberService是以”service”关键字开头，这里可以认为是
    众多面向对象编程语言里面的接口类（interface或者protocal）的定义，因为其中的
    方法定义都不会有具体的方法实现，方法实现是要在服务器后端代码中实现的
    """

    @staticmethod
    def AddTwo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/addTwoNumbers.AddTwoNumberService/AddTwo',
            addTwoNumbers__pb2.AddTwoNumberRequest.SerializeToString,
            addTwoNumbers__pb2.AddTwoNumberReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
